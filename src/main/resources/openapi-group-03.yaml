openapi: 3.0.0

info:
  title: 'Mars Concept Title'
  description: 'Please complete this spec as seen in the module Information Module'
  version: 0.0.1

components:
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
    adminToken:
      type: http
      scheme: bearer
  schemas:
    user:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        address:
          type: object
          properties:
            planet:
              type: string
            countryOrColony:
              type: string
            cityOrDistrict:
              type: string
            street:
              type: string
            number:
              type: number
    order:
      type: object
      properties:
        orderId:
          type: integer
        userId:
          type: integer
        rocketId:
          type: integer
        statusId:
          type: integer
        mass:
          type: number
        width:
          type: number
        height:
          type: number
        depth:
          type: number
        cost:
          type: number
        address:
          type: object
          properties:
            planet:
              type: string
            countryOrColony:
              type: string
            cityOrDistrict:
              type: string
            street:
              type: string
            number:
              type: number

    rocket:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        departure:
          type: string
        arrival:
          type: string
        pricePerKilo:
          type: number
        maxMass:
          type: number
        maxVolume:
          type: number
        availableMass:
          type: number
        availableVolume:
          type: number

servers:
  - url: http://localhost:8080/
    description: 'Local development implementation'
  - url: https://project-ii.ti.howest.be/mars-03
    description: 'Public web api'

tags:
  - name: Users
    description: Handle users
  - name: Orders
    description: Handle orders
  - name: Rockets
    description: Handle rockets
  - name: Details
    description: Receive details
  - name: Miscellaneous
    description: Some other api calls

paths:
  /api/message:
    get:
      tags:
        - Miscellaneous
      description: Get a nice message
      operationId: getMessage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string

  /api/users:
    get:
      tags:
        - Users
      description: Get all user info
      operationId: getUsers
      security:
        - adminToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'

  /api/user:
    post:
      tags:
        - Users
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: User created
          content:
            application/json:
              example: ka0b4UvW+sABEITA7rvLAmGppKXYrWVaVL5PP9TCyFg=
              schema:
                type: string
        '409':
          description: Email is already used

  /api/login:
    post:
      tags:
        - Users
      description: Login as user or admin
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User logged in
          content:
            application/json:
              example: ka0b4UvW+sABEITA7rvLAmGppKXYrWVaVL5PP9TCyFg=
              schema:
                type: string
        '403':
          description: Unknown email or wrong password

  /api/details/user:
    get:
      tags:
        - Users
        - Details
      description: Get your user details
      operationId: getUser
      security:
        - userToken: []
      responses:
        '200':
          description: User details received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

  /api/userId/user:
    get:
      tags:
        - Users
      description: Get your unique userId
      operationId: getUserId
      security:
        - userToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer

  /api/update/user:
    patch:
      tags:
        - Users
      description: Update a user's details
      operationId: setUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - type: string
                  - $ref: '#/components/schemas/user'
      security:
        - userToken: []
      responses:
        '200':
          description: User's info updated
          content:
            application/json:
              example: ka0b4UvW+sABEITA7rvLAmGppKXYrWVaVL5PP9TCyFg=
              schema:
                type: string
        '403':
          description: Wrong password or email already in use


  /api/details/orders:
    get:
      tags:
        - Orders
        - Details
      description: Get your specific user
      operationId: getOrdersForUser
      security:
        - userToken: []
      responses:
        '200':
          description: User orders received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'

  /api/orders:
    get:
      tags:
        - Orders
      description: Get all orders details
      operationId: getOrders
      security:
        - adminToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'

  /api/orders/{id}:
    get:
      tags:
        - Orders
      description: Get specific orders details
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/order'
        '404':
          description: Order not found

  /api/order:
    post:
      tags:
        - Orders
      description: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'

  /api/rockets:
    get:
      tags:
        - Rockets
      description: Get info of all rockets
      operationId: getRockets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/rocket'
